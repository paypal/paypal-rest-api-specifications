{
  "openapi": "3.0.3",
  "info": {
    "title": "Orders",
    "description": "Partners can use the Orders API to create, show details for, authorize, and capture payment for orders.<blockquote><strong>Orders API integration note:</strong> The PayPal Commerce Platform is a limited-release solution aimed at partners, crowd funding, and multi-party commerce platforms. To use Orders API for Partners, see <a href=\"/docs/multiparty/\">Multiparty Payments</a>. v1 of the API will be deprecated soon. A new version is available at <a href=\"/docs/api/orders/v2/\">Orders API v2</a>.</blockquote>",
    "version": "1.1"
  },
  "paths": {
    "/v1/checkout/orders": {
      "post": {
        "summary": "Create order",
        "description": "Creates an order.",
        "operationId": "orders.create",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that includes the PayPal-generated order ID, an array of purchase unit objects, payment details, customer information, metadata, and order status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order"
                },
                "examples": {
                  "0": {
                    "$ref": "#/components/examples/order"
                  }
                }
              }
            }
          },
          "default": {
            "description": "The error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/paypal_partner_attribution_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/order"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/payment",
              "https://uri.paypal.com/services/payments/channelpartner",
              "https://uri.paypal.com/services/payments/partnerfee",
              "https://uri.paypal.com/services/payments/realtimepayment"
            ]
          }
        ],
        "tags": [
          "orders"
        ]
      }
    },
    "/v1/checkout/orders/{order_id}": {
      "get": {
        "summary": "Show order details",
        "description": "Shows details for an order, by ID.",
        "operationId": "orders.get",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that shows order details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order"
                }
              }
            }
          },
          "default": {
            "description": "The error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/order_id"
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/payment",
              "https://uri.paypal.com/services/payments/channelpartner",
              "https://uri.paypal.com/services/payments/partnerfee",
              "https://uri.paypal.com/services/payments/realtimepayment"
            ]
          }
        ],
        "tags": [
          "orders"
        ]
      },
      "delete": {
        "summary": "Cancel order",
        "description": "Cancels an order, by ID, and deletes the order. To call this method, the order status must be  `CREATED` or `APPROVED`.",
        "operationId": "orders.cancel",
        "responses": {
          "204": {
            "description": "A successful request returns the HTTP `204 No Content` status code with no JSON response body. If the order is already paid, the order cannot be canceled and the request returns the HTTP `422 Unprocessable Entity` status code with the message, `This order is in progress`."
          },
          "default": {
            "description": "The error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/order_id"
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/payment",
              "https://uri.paypal.com/services/payments/realtimepayment"
            ]
          }
        ],
        "tags": [
          "orders"
        ]
      }
    },
    "/v1/checkout/orders/{order_id}/pay": {
      "post": {
        "summary": "Pay for order",
        "description": "Initiates a PayPal payment that a buyer has approved.<blockquote><strong>Note:</strong> For Partner use cases, use the <code>disbursement_mode</code> to indicate whether to disburse funds to the seller and partner accounts immediately or later. If you delay disbursement, you must call <a href=\"/docs/multiparty/checkout/delayed-disbursement/\">disburse funds</a> to disburse funds to the merchant and partner.</blockquote>",
        "operationId": "orders.pay",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that shows order and payment details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pay_order_response"
                }
              }
            }
          },
          "201": {
            "description": "A successful request returns the HTTP `201 Created` status code and a JSON response body that shows order and payment details.<blockquote><strong>Note:</strong> Applies to existing asynchronous payment processing integrations.</blockquote>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pay_order_response"
                }
              }
            }
          },
          "202": {
            "description": "A successful request returns the HTTP `202 Accepted` status code and a JSON response body that shows order and payment details.<blockquote><strong>Note:</strong> Applies to existing asynchronous payment processing integrations.</blockquote>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pay_order_response"
                }
              }
            }
          },
          "default": {
            "description": "The error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/order_id"
          },
          {
            "$ref": "#/components/parameters/paypal_partner_attribution_id"
          },
          {
            "$ref": "#/components/parameters/paypal_request_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pay_order_request"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/payment",
              "https://uri.paypal.com/services/payments/realtimepayment"
            ]
          }
        ],
        "tags": [
          "orders-payment-actions"
        ]
      }
    }
  },
  "tags": [
    {
      "name": "orders",
      "description": "Use the `/checkout/orders` resource to create, cancel, and show details for orders."
    },
    {
      "name": "orders-payment-actions",
      "description": "Use the `/checkout/orders` resource with the `/pay` action to pay for an order. When you [create an order](#orders_create), the response includes an approval URL. Redirect the customer to this approval URL."
    }
  ],
  "externalDocs": {
    "url": "https://developer.paypal.com/docs/api/orders/v1/"
  },
  "servers": [
    {
      "url": "https://api-m.sandbox.paypal.com",
      "description": "PayPal Sandbox Environment"
    },
    {
      "url": "https://api-m.paypal.com",
      "description": "PayPal Live Environment"
    }
  ],
  "components": {
    "securitySchemes": {
      "Oauth2": {
        "type": "oauth2",
        "description": "Oauth 2.0 authentication",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "/v1/oauth2/token",
            "scopes": {
              "https://uri.paypal.com/services/payments/payment": "Manage payments and checkout workflow.",
              "https://uri.paypal.com/services/payments/unilateralrefund": "This scope enables partners/facilitators to perform unilateralrefund and also refund.",
              "https://uri.paypal.com/services/payments/funding-options": "Access payer's funding options available for the payment.",
              "https://uri.paypal.com/services/payments/channelpartner": "Permission to explicitly specify the receiver of a payment on request payload.",
              "https://uri.paypal.com/services/payments/partnerfee": "Permission to partners to withdraw partner fee as part of the payment.",
              "https://uri.paypal.com/services/payments/realtimepayment": "Permission to do any real time payment, with support for sale/authorize/order intents"
            }
          }
        }
      }
    },
    "parameters": {
      "paypal_partner_attribution_id": {
        "name": "PayPal-Partner-Attribution-Id",
        "in": "header",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "order_id": {
        "name": "order_id",
        "in": "path",
        "description": "The ID of the order for which to execute a payment.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "paypal_request_id": {
        "name": "PayPal-Request-Id",
        "description": "The server stores keys forever.",
        "in": "header",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "error_details": {
        "title": "Error Details",
        "type": "object",
        "description": "The error details. Required for client-side `4XX` errors.",
        "properties": {
          "field": {
            "type": "string",
            "description": "The field that caused the error. If this field is in the body, set this value to the field's JSON pointer value. Required for client-side errors."
          },
          "value": {
            "type": "string",
            "description": "The value of the field that caused the error."
          },
          "location": {
            "type": "string",
            "description": "The location of the field that caused the error. Value is `body`, `path`, or `query`.",
            "default": "body"
          },
          "issue": {
            "type": "string",
            "description": "The unique, fine-grained application-level error code."
          },
          "description": {
            "type": "string",
            "description": "The human-readable description for an issue. The description can change over the lifetime of an API, so clients must not depend on this value."
          }
        },
        "required": [
          "issue"
        ]
      },
      "error_link_description": {
        "title": "Link Description",
        "description": "The request-related [HATEOAS link](/api/rest/responses/#hateoas-links) information.",
        "type": "object",
        "required": [
          "href",
          "rel"
        ],
        "properties": {
          "href": {
            "description": "The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call.",
            "type": "string",
            "minLength": 0,
            "maxLength": 20000,
            "pattern": "^.*$"
          },
          "rel": {
            "description": "The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml).",
            "type": "string",
            "minLength": 0,
            "maxLength": 100,
            "pattern": "^.*$"
          },
          "method": {
            "description": "The HTTP method required to make the related call.",
            "type": "string",
            "minLength": 3,
            "maxLength": 7,
            "pattern": "^[A-Z]*$",
            "enum": [
              "CONNECT",
              "DELETE",
              "GET",
              "HEAD",
              "OPTIONS",
              "PATCH",
              "POST",
              "PUT"
            ]
          }
        }
      },
      "error_default": {
        "description": "The default error response.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/error_400"
          },
          {
            "$ref": "#/components/schemas/error_401"
          },
          {
            "$ref": "#/components/schemas/error_403"
          },
          {
            "$ref": "#/components/schemas/error_404"
          },
          {
            "$ref": "#/components/schemas/error_409"
          },
          {
            "$ref": "#/components/schemas/error_415"
          },
          {
            "$ref": "#/components/schemas/error_422"
          },
          {
            "$ref": "#/components/schemas/error_500"
          },
          {
            "$ref": "#/components/schemas/error_503"
          }
        ]
      },
      "error_400": {
        "type": "object",
        "title": "Bad Request Error",
        "description": "Request is not well-formed, syntactically incorrect, or violates schema.",
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "INVALID_REQUEST"
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Request is not well-formed, syntactically incorrect, or violates schema."
            ]
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/error_details"
            }
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID. Used for correlation purposes."
          },
          "links": {
            "description": "An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).",
            "type": "array",
            "minItems": 0,
            "maxItems": 10000,
            "items": {
              "$ref": "#/components/schemas/error_link_description"
            }
          }
        }
      },
      "error_401": {
        "type": "object",
        "title": "Unauthorized Error",
        "description": "Authentication failed due to missing Authorization header, or invalid authentication credentials.",
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "AUTHENTICATION_FAILURE"
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Authentication failed due to missing authorization header, or invalid authentication credentials."
            ]
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/error_details"
            }
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID. Used for correlation purposes."
          },
          "links": {
            "description": "An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).",
            "type": "array",
            "minItems": 0,
            "maxItems": 10000,
            "items": {
              "$ref": "#/components/schemas/error_link_description"
            }
          }
        }
      },
      "error_403": {
        "type": "object",
        "title": "Not Authorized Error",
        "description": "The client is not authorized to access this resource, although it may have valid credentials. ",
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "NOT_AUTHORIZED"
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Authorization failed due to insufficient permissions."
            ]
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/error_details"
            }
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID. Used for correlation purposes."
          },
          "links": {
            "description": "An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).",
            "type": "array",
            "minItems": 0,
            "maxItems": 10000,
            "items": {
              "$ref": "#/components/schemas/error_link_description"
            }
          }
        }
      },
      "error_404": {
        "type": "object",
        "title": "Not found Error",
        "description": "The server has not found anything matching the request URI. This either means that the URI is incorrect or the resource is not available.",
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "RESOURCE_NOT_FOUND"
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "The specified resource does not exist."
            ]
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/error_details"
            }
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID. Used for correlation purposes."
          },
          "links": {
            "description": "An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).",
            "type": "array",
            "minItems": 0,
            "maxItems": 10000,
            "items": {
              "$ref": "#/components/schemas/error_link_description"
            }
          }
        }
      },
      "error_409": {
        "type": "object",
        "title": "Resource Conflict Error",
        "description": "The server has detected a conflict while processing this request.",
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "RESOURCE_CONFLICT"
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "The server has detected a conflict while processing this request."
            ]
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/error_details"
            }
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID. Used for correlation purposes."
          },
          "links": {
            "description": "An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).",
            "type": "array",
            "minItems": 0,
            "maxItems": 10000,
            "items": {
              "$ref": "#/components/schemas/error_link_description"
            }
          }
        }
      },
      "error_415": {
        "type": "object",
        "title": "Unsupported Media Type Error",
        "description": "The server does not support the request payload's media type.",
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "UNSUPPORTED_MEDIA_TYPE"
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "The server does not support the request payload's media type."
            ]
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/error_details"
            }
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID. Used for correlation purposes."
          },
          "links": {
            "description": "An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).",
            "type": "array",
            "minItems": 0,
            "maxItems": 10000,
            "items": {
              "$ref": "#/components/schemas/error_link_description"
            }
          }
        }
      },
      "error_422": {
        "type": "object",
        "title": "Unprocessable Entity Error",
        "description": "The requested action cannot be performed and may require interaction with APIs or processes outside of the current request. This is distinct from a 500 response in that there are no systemic problems limiting the API from performing the request.",
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "UNPROCESSABLE_ENTITY"
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "The requested action could not be performed, semantically incorrect, or failed business validation."
            ]
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/error_details"
            }
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID. Used for correlation purposes."
          },
          "links": {
            "description": "An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).",
            "type": "array",
            "minItems": 0,
            "maxItems": 10000,
            "items": {
              "$ref": "#/components/schemas/error_link_description"
            }
          }
        }
      },
      "error_500": {
        "type": "object",
        "title": "Internal Server Error",
        "description": "This is either a system or application error, and generally indicates that although the client appeared to provide a correct request, something unexpected has gone wrong on the server.",
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "INTERNAL_SERVER_ERROR"
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "An internal server error occurred."
            ]
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID. Used for correlation purposes."
          },
          "links": {
            "description": "An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).",
            "type": "array",
            "minItems": 0,
            "maxItems": 10000,
            "items": {
              "$ref": "#/components/schemas/error_link_description"
            }
          }
        },
        "example": {
          "name": "INTERNAL_SERVER_ERROR",
          "message": "An internal server error occurred.",
          "debug_id": "90957fca61718",
          "links": [
            {
              "href": "https://developer.paypal.com/api/orders/v2/#error-INTERNAL_SERVER_ERROR",
              "rel": "information_link"
            }
          ]
        }
      },
      "error_503": {
        "type": "object",
        "title": "Service Unavailable Error",
        "description": "The server is temporarily unable to handle the request, for example, because of planned maintenance or downtime.",
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "SERVICE_UNAVAILABLE"
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Service Unavailable."
            ]
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID. Used for correlation purposes."
          },
          "links": {
            "description": "An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).",
            "type": "array",
            "minItems": 0,
            "maxItems": 10000,
            "items": {
              "$ref": "#/components/schemas/error_link_description"
            }
          }
        },
        "example": {
          "name": "SERVICE_UNAVAILABLE",
          "message": "Service Unavailable.",
          "debug_id": "90957fca61718",
          "information_link": "https://developer.paypal.com/docs/api/orders/v2/#error-SERVICE_UNAVAILABLE"
        }
      },
      "amount": {
        "type": "object",
        "title": "Amount",
        "description": "The payment amount, with details.",
        "additionalProperties": false,
        "properties": {
          "currency": {
            "type": "string",
            "description": "The [three-character ISO-4217 currency code](/docs/integration/direct/rest/currency-codes/). PayPal does not support all currencies."
          },
          "total": {
            "type": "string",
            "description": "The total amount charged to the payee by the payer. For refunds, represents the amount that the payee refunds to the original payer. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul>"
          },
          "details": {
            "type": "object",
            "title": "Payment Amount Details",
            "description": "The additional details about the payment amount.",
            "additionalProperties": false,
            "properties": {
              "subtotal": {
                "type": "string",
                "description": "The subtotal amount for the items. If the request includes line items, this property is **required**. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul>"
              },
              "shipping": {
                "type": "string",
                "description": "The shipping fee. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul>"
              },
              "tax": {
                "type": "string",
                "description": "The tax. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul>"
              },
              "handling_fee": {
                "type": "string",
                "description": "The handling fee. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul>Supported for the PayPal payment method only."
              },
              "shipping_discount": {
                "type": "string",
                "description": "The shipping fee discount. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul>Supported for the PayPal payment method only."
              },
              "insurance": {
                "type": "string",
                "description": "The insurance fee. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul>Supported only for the PayPal payment method."
              },
              "gift_wrap": {
                "type": "string",
                "description": "The gift wrap fee. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul>"
              }
            }
          }
        },
        "required": [
          "currency",
          "total"
        ]
      },
      "payee_display_metadata": {
        "type": "object",
        "title": "Payee Display Metadata",
        "description": "The display-only metadata for the payee.",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address for the payer. Maximum length is 127 characters."
          },
          "display_phone": {
            "type": "object",
            "title": "Display Phone",
            "description": "The payee's phone number.",
            "properties": {
              "country_code": {
                "type": "string",
                "description": "The [two-character IS0-3166-1 country code](https://developer.paypal.com/docs/integration/direct/rest/country-codes/) of the payee's country."
              },
              "number": {
                "type": "string",
                "description": "The in-country phone number, in [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164-201011-I)."
              }
            }
          },
          "brand_name": {
            "type": "string",
            "description": "The payer's business name."
          }
        }
      },
      "payee": {
        "type": "object",
        "title": "Payee",
        "description": "The payee who receives the funds and fulfills the order.",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address associated with the payee's PayPal account. For an intent of authorize or order, the email address must be associated with a confirmed PayPal business account. For an intent of sale, the email can either:<ul><li>Be associated with a confirmed PayPal personal or business account.</li><li>Not be associated with a PayPal account.</li></ul>"
          },
          "merchant_id": {
            "type": "string",
            "description": "The encrypted PayPal account ID for the payee."
          },
          "payee_display_metadata": {
            "$ref": "#/components/schemas/payee_display_metadata"
          }
        }
      },
      "item": {
        "type": "object",
        "title": "Item",
        "description": "The item details.",
        "properties": {
          "sku": {
            "type": "string",
            "description": "The stock keeping unit (SKU) for the item.",
            "maxLength": 127
          },
          "name": {
            "type": "string",
            "description": "The item name. Maximum length is 127 characters."
          },
          "description": {
            "type": "string",
            "description": "The item description. Supported only for the PayPal payment method.",
            "maxLength": 127
          },
          "quantity": {
            "type": "string",
            "description": "The item quantity. Must be a whole number.",
            "maxLength": 10,
            "pattern": "^[0-9]{0,10}$"
          },
          "price": {
            "type": "string",
            "description": "The item cost. Supports two decimal places.",
            "maxLength": 10,
            "pattern": "^[0-9]{0,10}(\\.[0-9]{0,2})?$"
          },
          "currency": {
            "type": "string",
            "description": "The [three-character ISO-4217 currency code](/docs/integration/direct/rest/currency-codes/)."
          },
          "tax": {
            "type": "string",
            "description": "The item tax. Supported only for the PayPal payment method."
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The URL to item information. Available to the payer in the transaction history."
          }
        },
        "required": [
          "quantity",
          "name",
          "price",
          "currency"
        ]
      },
      "country_code": {
        "type": "string",
        "description": "The [two-character ISO 3166-1 code](/docs/integration/direct/rest/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>",
        "format": "ppaas_common_country_code_v2",
        "maxLength": 2,
        "minLength": 2,
        "pattern": "^([A-Z]{2}|C2)$"
      },
      "address": {
        "type": "object",
        "title": "Address",
        "description": "The billing address or shipping address for a payment.",
        "properties": {
          "line1": {
            "type": "string",
            "description": "The first line of the address. For example, number, street, and so on."
          },
          "line2": {
            "type": "string",
            "description": "The second line of the address. For example, suite or apartment number."
          },
          "city": {
            "type": "string",
            "description": "The city name."
          },
          "country_code": {
            "$ref": "#/components/schemas/country_code"
          },
          "postal_code": {
            "type": "string",
            "description": "The postal code, which is the zip code or equivalent. Typically required for countries with a postal code or an equivalent. See [postal code](https://en.wikipedia.org/wiki/Postal_code)."
          },
          "state": {
            "type": "string",
            "description": "The [code](/docs/integration/direct/rest/state-codes/) for a US state or the equivalent for other countries. Required for transactions if the address is in one of these countries: [Argentina](/docs/integration/direct/rest/state-codes/#argentina), [Brazil](/docs/integration/direct/rest/state-codes/#brazil), [Canada](/docs/integration/direct/rest/state-codes/#canada), [India](/docs/integration/direct/rest/state-codes/#india), [Italy](/docs/integration/direct/rest/state-codes/#italy), [Japan](/docs/integration/direct/rest/state-codes/#japan), [Mexico](/docs/integration/direct/rest/state-codes/#mexico), [Thailand](/docs/integration/direct/rest/state-codes/#thailand), or [United States](/docs/integration/direct/rest/state-codes/#usa). Maximum length is 40 single-byte characters."
          },
          "phone": {
            "type": "string",
            "format": "phone",
            "description": "The phone number, in [E.123 format](https://www.itu.int/rec/T-REC-E.123-200102-I/en). Maximum length is 50 characters."
          },
          "normalization_status": {
            "type": "string",
            "description": "The address normalization status. Returned only for payers from Brazil.",
            "readOnly": true,
            "enum": [
              "UNKNOWN",
              "UNNORMALIZED_USER_PREFERRED",
              "NORMALIZED",
              "UNNORMALIZED"
            ]
          },
          "type": {
            "type": "string",
            "description": "The type of address. For example, `HOME_OR_WORK`, `GIFT`, and so on."
          }
        },
        "required": [
          "line1",
          "country_code"
        ]
      },
      "shipping_address": {
        "title": "Shipping Address",
        "description": "The shipping address details.",
        "allOf": [
          {
            "$ref": "#/components/schemas/address"
          },
          {
            "properties": {
              "recipient_name": {
                "type": "string",
                "description": "The name of the recipient at this address.",
                "maxLength": 127
              }
            }
          }
        ]
      },
      "currency": {
        "type": "object",
        "title": "Currency",
        "description": "The currency and amount for a transaction.",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The [three-character ISO-4217 currency code](/docs/integration/direct/rest/currency-codes/). PayPal does not support all currencies."
          },
          "value": {
            "type": "string",
            "description": "The amount. Includes the specified number of digits after decimal separator for the [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217#Active_codes)."
          }
        },
        "required": [
          "currency",
          "value"
        ]
      },
      "partner_fee_details": {
        "type": "object",
        "title": "Partner Fee Details",
        "description": "The partner fee that is collected for the original transaction.",
        "additionalProperties": false,
        "properties": {
          "receiver": {
            "description": "The partner who receives the partner fee.",
            "$ref": "#/components/schemas/payee"
          },
          "amount": {
            "description": "The amount and currency of the partner fee.",
            "$ref": "#/components/schemas/currency"
          }
        },
        "required": [
          "receiver",
          "amount"
        ]
      },
      "name_value_pair": {
        "type": "object",
        "title": "Name and Value Pair",
        "description": "The name-and-value pair details.",
        "properties": {
          "name": {
            "type": "string",
            "description": "The key for the name-and-value pair. You must correlate the value and name types."
          },
          "value": {
            "type": "string",
            "description": "The value for the name-and-value pair."
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "metadata": {
        "type": "object",
        "title": "Metadata",
        "description": "The name-and-value pairs that contain external data, such as user, user feedback, score, and so on.",
        "properties": {
          "supplementary_data": {
            "type": "array",
            "description": "An array of name-and-value pairs that contain data required by PayPal for transaction processing.",
            "items": {
              "description": "A name-and-value pair that contains the data that PayPal requires to process the transaction.",
              "$ref": "#/components/schemas/name_value_pair"
            }
          }
        }
      },
      "link_description": {
        "type": "object",
        "title": "Link Description",
        "description": "The request-related [HATEOAS link](/docs/api/overview/#hateoas-links) information.",
        "required": [
          "href",
          "rel"
        ],
        "properties": {
          "href": {
            "type": "string",
            "description": "The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call."
          },
          "rel": {
            "type": "string",
            "description": "The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml)."
          },
          "method": {
            "type": "string",
            "description": "The HTTP method required to make the related call.",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "DELETE",
              "HEAD",
              "CONNECT",
              "OPTIONS",
              "PATCH"
            ]
          }
        }
      },
      "capture": {
        "type": "object",
        "title": "Capture",
        "description": "A capture transaction.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the capture transaction.",
            "readOnly": true
          },
          "amount": {
            "description": "The amount to capture. Default is the authorization amount. If that amount is the same as the authorized amount, the authorization state changes to <code>CAPTURED</code>. Otherwise, the authorization state changes to `PARTIALLY_CAPTURED`. To indicate that this capture is the final capture, set `is_final_capture` to `true`.",
            "$ref": "#/components/schemas/amount"
          },
          "status": {
            "type": "string",
            "description": "The status of the capture transaction.",
            "readOnly": true,
            "enum": [
              "PENDING",
              "COMPLETED",
              "REFUNDED",
              "PARTIALLY_REFUNDED",
              "DENIED"
            ]
          },
          "reason_code": {
            "type": "string",
            "description": "A reason code that indicates the reason for the transaction state of <code>PENDING</code> or <code>REVERSED</code>.",
            "readOnly": true,
            "enum": [
              "CHARGEBACK",
              "GUARANTEE",
              "BUYER_COMPLAINT",
              "REFUND",
              "UNCONFIRMED_SHIPPING_ADDRESS",
              "ECHECK",
              "INTERNATIONAL_WITHDRAWAL",
              "RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION",
              "PAYMENT_REVIEW",
              "REGULATORY_REVIEW",
              "UNILATERAL",
              "VERIFICATION_REQUIRED",
              "DELAYED_DISBURSEMENT"
            ]
          },
          "transaction_fee": {
            "description": "The currency and amount of the transaction fee.",
            "$ref": "#/components/schemas/currency"
          },
          "links": {
            "type": "array",
            "description": "An array of request-related [HATEOAS links](/api/rest/responses/#hateoas-links).",
            "readOnly": true,
            "items": {
              "readOnly": true,
              "$ref": "#/components/schemas/link_description"
            }
          }
        }
      },
      "refund": {
        "type": "object",
        "title": "Refund",
        "description": "A refund transaction.",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "The ID of the refund transaction. Maximum length is 17 characters."
          },
          "amount": {
            "description": "The amount that is refunded to the payer and the amount that is refunded to the payee. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul>",
            "$ref": "#/components/schemas/amount"
          },
          "capture_id": {
            "type": "string",
            "readOnly": true,
            "description": "The ID of the sale transaction to refund."
          },
          "sale_id": {
            "type": "string",
            "readOnly": true,
            "description": "The ID of the sale transaction to refund."
          },
          "status": {
            "type": "string",
            "description": "The status of the refund.",
            "readOnly": true,
            "enum": [
              "PENDING",
              "COMPLETED",
              "FAILED"
            ]
          },
          "links": {
            "type": "array",
            "description": "An array of request-related [HATEOAS links](/api/rest/responses/#hateoas-links).",
            "readOnly": true,
            "items": {
              "readOnly": true,
              "$ref": "#/components/schemas/link_description"
            }
          }
        }
      },
      "sale": {
        "type": "object",
        "title": "Sale",
        "description": "A sale transaction.",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "The ID of the sale transaction."
          },
          "amount": {
            "description": "The amount to collect. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul>",
            "$ref": "#/components/schemas/amount"
          },
          "transaction_fee": {
            "description": "The currency and amount of the transaction fee. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul>",
            "$ref": "#/components/schemas/currency"
          },
          "status": {
            "type": "string",
            "description": "The status of the sale transaction.",
            "readOnly": true,
            "enum": [
              "COMPLETED",
              "PARTIALLY_REFUNDED",
              "PENDING",
              "REFUNDED",
              "DENIED"
            ]
          },
          "reason_code": {
            "type": "string",
            "description": "A reason code that indicates the reason for the transaction state of <code>PENDING</code> or <code>REVERSED</code>.",
            "readOnly": true,
            "enum": [
              "CHARGEBACK",
              "GUARANTEE",
              "BUYER_COMPLAINT",
              "REFUND",
              "UNCONFIRMED_SHIPPING_ADDRESS",
              "ECHECK",
              "INTERNATIONAL_WITHDRAWAL",
              "RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION",
              "PAYMENT_REVIEW",
              "REGULATORY_REVIEW",
              "UNILATERAL",
              "VERIFICATION_REQUIRED",
              "DELAYED_DISBURSEMENT"
            ]
          },
          "create_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the resource was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "readOnly": true
          },
          "update_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the resource was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "readOnly": true
          },
          "links": {
            "type": "array",
            "description": "An array of request-related [HATEOAS links](/api/rest/responses/#hateoas-links).",
            "readOnly": true,
            "items": {
              "readOnly": true,
              "$ref": "#/components/schemas/link_description"
            }
          }
        }
      },
      "payment_summary": {
        "type": "object",
        "title": "Payment Summary",
        "description": "The payment summary.",
        "properties": {
          "captures": {
            "type": "array",
            "description": "An array of captures for a purchase unit. A purchase unit can have zero or more captures.",
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/capture"
            }
          },
          "refunds": {
            "type": "array",
            "description": "An array of refunds for a purchase unit. A purchase unit can have zero or more refunds.",
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/refund"
            }
          },
          "sales": {
            "type": "array",
            "description": "An array of sales for a purchase unit. A purchase unit can have zero or more sales.",
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/sale"
            }
          },
          "authorizations": {
            "type": "array",
            "description": "An array of authorizations for a purchase unit. A purchase unit can have zero or more authorizations.",
            "minItems": 1,
            "items": {
              "description": "An authorization for a purchase unit.",
              "$ref": "#/components/schemas/sale"
            }
          }
        }
      },
      "purchase_unit": {
        "type": "object",
        "title": "Purchase Unit",
        "description": "A purchase unit. Establishes a contract between the payer and payee.",
        "properties": {
          "reference_id": {
            "type": "string",
            "description": "The merchant ID for the purchase unit.",
            "maxLength": 256
          },
          "amount": {
            "description": "The amount to collect.",
            "$ref": "#/components/schemas/amount"
          },
          "payee": {
            "description": "The recipient of the funds for this transaction.",
            "$ref": "#/components/schemas/payee"
          },
          "description": {
            "type": "string",
            "description": "The purchase description.",
            "maxLength": 127
          },
          "custom": {
            "type": "string",
            "description": "The client-provided external ID. Used to reconcile client transactions with PayPal transactions. Returned in transaction and settlement reports. Only supported for the PayPal payment method.",
            "maxLength": 127
          },
          "invoice_number": {
            "type": "string",
            "description": "The API caller-provided external invoice ID for this order.. Only supported for the PayPal payment method.",
            "maxLength": 256
          },
          "payment_descriptor": {
            "type": "string",
            "description": "The payment descriptor on the buyer credit card statement of account activity.",
            "maxLength": 22
          },
          "items": {
            "type": "array",
            "description": "An array of items that the customer is purchasing from the merchant.",
            "items": {
              "$ref": "#/components/schemas/item"
            }
          },
          "notify_url": {
            "type": "string",
            "format": "uri",
            "description": "The payment notifications URL.",
            "maxLength": 2048
          },
          "shipping_address": {
            "$ref": "#/components/schemas/shipping_address"
          },
          "shipping_method": {
            "type": "string",
            "description": "The shipping method. For example, `USPSParcel`."
          },
          "partner_fee_details": {
            "$ref": "#/components/schemas/partner_fee_details"
          },
          "payment_linked_group": {
            "type": "integer",
            "description": "An ID that groups multiple linked purchase units. The purchase transactions are linked only for the payment and not for refund. A refund is processed only for the specific transaction within the same linked group.",
            "minimum": 1,
            "maximum": 100
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "payment_summary": {
            "$ref": "#/components/schemas/payment_summary"
          },
          "status": {
            "type": "string",
            "description": "The transaction state.",
            "readOnly": true,
            "enum": [
              "NOT_PROCESSED",
              "PENDING",
              "VOIDED",
              "AUTHORIZED",
              "CAPTURED"
            ]
          },
          "reason_code": {
            "type": "string",
            "description": "The reason code for a transaction status of <code>PENDING</code> or <code>REVERSED</code>. Eventually, this field will replace <code>pending_reason</code>. Supported only for the PayPal payment method.",
            "readOnly": true,
            "enum": [
              "PAYER_SHIPPING_UNCONFIRMED",
              "MULTI_CURRENCY",
              "RISK_REVIEW",
              "REGULATORY_REVIEW",
              "VERIFICATION_REQUIRED",
              "ORDER",
              "OTHER",
              "DECLINED_BY_POLICY"
            ]
          }
        },
        "required": [
          "amount",
          "reference_id"
        ]
      },
      "payment_details": {
        "type": "object",
        "title": "Payment Details",
        "description": "The payment details for the order.",
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "The payment ID for the order.",
            "readOnly": true
          },
          "disbursement_mode": {
            "type": "string",
            "description": "Indicates whether to disburse the payment instantly or delay the payment.",
            "readOnly": true,
            "enum": [
              "INSTANT",
              "DELAYED"
            ]
          }
        }
      },
      "language": {
        "type": "string",
        "description": "The [language tag](https://tools.ietf.org/html/bcp47#section-2) for the language in which to localize the error-related strings, such as messages, issues, and suggested actions. The tag is made up of the [ISO 639-2 language code](https://www.loc.gov/standards/iso639-2/php/code_list.php), the optional [ISO-15924 script tag](https://www.unicode.org/iso15924/codelists.html), and the [ISO-3166 alpha-2 country code](/docs/integration/direct/rest/country-codes/).",
        "format": "ppaas_common_language_v3",
        "maxLength": 10,
        "minLength": 2,
        "pattern": "^[a-z]{2}(?:-[A-Z][a-z]{3})?(?:-(?:[A-Z]{2}))?$"
      },
      "application_context": {
        "type": "object",
        "title": "Application Context",
        "description": "Customizes the payer experience during the approval process for the payment with PayPal.<blockquote><strong>Note:</strong> The PayPal Commerce Platform might configure <code>brand_name</code> and <code>shipping_preference</code> during partner account setup, which overrides the request values.</blockquote>",
        "properties": {
          "brand_name": {
            "type": "string",
            "description": "The label that overrides the business name in the PayPal account on the PayPal pages.",
            "maxLength": 127
          },
          "locale": {
            "$ref": "#/components/schemas/language"
          },
          "shipping_preference": {
            "type": "string",
            "description": "The shipping preferences.",
            "enum": [
              "NO_SHIPPING",
              "GET_FROM_FILE",
              "SET_PROVIDED_ADDRESS"
            ]
          },
          "user_action": {
            "type": "string",
            "description": "Defines whether to present the customer with a <strong>Continue</strong> or <strong>Pay Now</strong> checkout flow. To present buyers with the <strong>Pay Now</strong> checkout flow, set <code>useraction=commit</code>. Default is the <strong>Continue</strong> checkout flow.<table><thead><tr><th>Checkout&nbsp;flow</th><th>Choose when</th><th>Description</th></tr></thead><tbody><tr><td><strong>Continue</strong></td><td>You do not know the final payment amount when you initiate the checkout flow.</td><td>The default flow. Redirects the customer to the PayPal payment page, which shows the <strong>Continue</strong> button. When the customer clicks <strong>Continue</strong>, the customer can change the payment amount.</td></tr><tr><td><strong>Pay Now</strong></td><td>You know the final payment amount when you initiate the checkout flow.</td><td>Set <code>user_action=commit</code>. Redirects the customer to the PayPal payment page, which shows the <strong>Pay Now</strong> button. When the customer clicks <strong>Pay Now</strong>, the payment is processed immediately.</td></tr></tbody></table>"
          },
          "supplementary_data": {
            "type": "array",
            "description": "An array of name-and-value pairs that contain supplementary data required by PayPal for transaction processing.",
            "items": {
              "description": "The name-and-value pair that that contains supplementary data required by PayPal for transaction processing.",
              "$ref": "#/components/schemas/name_value_pair"
            }
          }
        }
      },
      "order": {
        "type": "object",
        "title": "Order",
        "description": "An order.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the order.",
            "readOnly": true
          },
          "intent": {
            "type": "string",
            "description": "The intent.",
            "enum": [
              "SALE",
              "AUTHORIZE"
            ]
          },
          "purchase_units": {
            "type": "array",
            "description": "An array of purchase units. Each purchase unit establishes a contract between a customer and merchant.",
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/purchase_unit"
            }
          },
          "payment_details": {
            "$ref": "#/components/schemas/payment_details"
          },
          "gross_total_amount": {
            "description": "The currency and amount of the PayPal-computed total of amounts in all purchase units.",
            "$ref": "#/components/schemas/currency"
          },
          "application_context": {
            "$ref": "#/components/schemas/application_context"
          },
          "metadata": {
            "deprecated": true,
            "$ref": "#/components/schemas/metadata"
          },
          "status": {
            "type": "string",
            "description": "The status of the order. After the customer approves the order, the status is `APPROVED`. After the payment is made for the order and the order completes, the status is `COMPLETED`.",
            "readOnly": true,
            "enum": [
              "CREATED",
              "APPROVED",
              "COMPLETED",
              "FAILED"
            ]
          },
          "redirect_urls": {
            "type": "object",
            "description": "The redirect URLs. Required only for the PayPal payment method. The supported settings are return and cancel URLs.",
            "title": "Redirect URLs",
            "additionalProperties": false,
            "properties": {
              "return_url": {
                "type": "string",
                "format": "uri",
                "description": "The URL where the payer is redirected after the payer approves the payment."
              },
              "cancel_url": {
                "type": "string",
                "format": "uri",
                "description": "The URL where the payer is redirected after the payer cancels the payment."
              }
            }
          },
          "create_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the resource was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "readOnly": true
          },
          "update_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the resource was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "readOnly": true
          },
          "links": {
            "type": "array",
            "readOnly": true,
            "description": "An array of request-related [HATEOAS links](/api/rest/responses/#hateoas-links). To complete the buyer approval, use the `approval_url` link with the `GET` method and do not use the link that shows the `REDIRECT` method.",
            "items": {
              "readOnly": true,
              "$ref": "#/components/schemas/link_description"
            }
          }
        },
        "required": [
          "purchase_units",
          "redirect_urls"
        ]
      },
      "error_details-2": {
        "title": "Error Details",
        "type": "object",
        "description": "The error details. Required for client-side `4XX` errors.",
        "properties": {
          "field": {
            "type": "string",
            "description": "The field that caused the error. If the field is in the body, set this value to the JSON pointer to that field. Required for client-side errors."
          },
          "value": {
            "type": "string",
            "description": "The value of the field that caused the error."
          },
          "location": {
            "type": "string",
            "description": "The location of the field that caused the error. Value is `body`, `path`, or `query`.",
            "default": "body"
          },
          "issue": {
            "type": "string",
            "description": "The unique and fine-grained application-level error code."
          },
          "description": {
            "type": "string",
            "description": "The human-readable description for an issue. The description MAY change over the lifetime of an API, so clients **MUST NOT** depend on this value."
          }
        },
        "required": [
          "issue"
        ]
      },
      "error": {
        "type": "object",
        "title": "Error",
        "description": "The error details.",
        "properties": {
          "name": {
            "type": "string",
            "description": "The human-readable, unique name of the error."
          },
          "message": {
            "type": "string",
            "description": "The message that describes the error."
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID that is used for correlation purposes."
          },
          "information_link": {
            "type": "string",
            "description": "The information link, or URI, that shows detailed information about this error for the developer.",
            "readOnly": true
          },
          "details": {
            "type": "array",
            "description": "An array of additional details about the error.",
            "items": {
              "$ref": "#/components/schemas/error_details-2"
            }
          },
          "links": {
            "type": "array",
            "description": "An array of request-related [HATEOAS links](/docs/api/overview/#hateoas-links).",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/link_description",
              "readOnly": true
            }
          }
        },
        "required": [
          "name",
          "message",
          "debug_id"
        ]
      },
      "credit_card": {
        "type": "object",
        "title": "Credit Card",
        "description": "Deprecated. The credit card details. You can use this instrument to fund a payment. Use a payment card instead.",
        "properties": {
          "number": {
            "type": "string",
            "description": "The credit card number. Value is numeric characters only with no spaces or punctuation. Must conform to the modulo and length required by each credit card type. *Redacted in responses.*"
          },
          "type": {
            "type": "string",
            "description": "The credit card type. Value is `visa`, `mastercard`, `discover`, or `amex`. Do not use these lowercase values for display."
          },
          "expire_month": {
            "type": "integer",
            "description": "The expiration month with no leading zero. Value is from `1` to `12`."
          },
          "expire_year": {
            "type": "integer",
            "description": "The four-digit expiration year."
          },
          "cvv2": {
            "type": "string",
            "description": "The three- to four-digit card validation code."
          },
          "first_name": {
            "type": "string",
            "description": "The card holder's first name."
          },
          "last_name": {
            "type": "string",
            "description": "The card holder's last name."
          },
          "billing_address": {
            "$ref": "#/components/schemas/address",
            "description": "The billing address for this card."
          },
          "links": {
            "type": "array",
            "description": "An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/link_description"
            }
          }
        },
        "required": [
          "number",
          "type",
          "expire_month",
          "expire_year"
        ]
      },
      "credit_card_token": {
        "type": "object",
        "title": "Credit Card Token",
        "description": "The tokenized credit card details. You can use this instrument to fund a payment.",
        "properties": {
          "credit_card_id": {
            "type": "string",
            "description": "The ID of credit card that is stored in the PayPal vault."
          },
          "payer_id": {
            "type": "string",
            "description": "A unique ID that you can assign and track when you store a credit card in the vault or use a vaulted credit card. This ID can help to avoid unintentional use or misuse of credit cards and can be any value, such as a UUID, user name, or email address. **Required** when you use a vaulted credit card and if a `payer_id` was originally provided when you vaulted the credit card."
          },
          "last4": {
            "type": "string",
            "readOnly": true,
            "description": "The last four digits of the stored credit card number."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The credit card type. Value is `visa`, `mastercard`, `discover`, or `amex`. Do not use these lowercase values for display."
          },
          "expire_month": {
            "type": "integer",
            "readOnly": true,
            "description": "The expiration month with no leading zero. Value is from `1` to `12`."
          },
          "expire_year": {
            "type": "integer",
            "readOnly": true,
            "description": "The four-digit expiration year."
          }
        },
        "required": [
          "credit_card_id"
        ]
      },
      "funding_instrument": {
        "type": "object",
        "title": "Funding Instrument",
        "description": "The funding instrument details. An instance of this schema is valid if and only if it validates against exactly one of these supported properties.",
        "properties": {
          "credit_card": {
            "description": "Deprecated. The credit card details. You can use this instrument to fund a payment. Use a payment card instead.",
            "$ref": "#/components/schemas/credit_card"
          },
          "credit_card_token": {
            "description": "The tokenized credit card details. You can use this instrument to fund a payment.",
            "$ref": "#/components/schemas/credit_card_token"
          }
        }
      },
      "payer_info": {
        "type": "object",
        "title": "Payer Information",
        "description": "The payer information.",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The payer's email address. Maximum length is 127 characters."
          },
          "salutation": {
            "type": "string",
            "description": "The payer's salutation.",
            "readOnly": true
          },
          "first_name": {
            "type": "string",
            "description": "The payer's first name.",
            "readOnly": true
          },
          "middle_name": {
            "type": "string",
            "description": "The payer's middle name.",
            "readOnly": true
          },
          "last_name": {
            "type": "string",
            "description": "The payer's last name.",
            "readOnly": true
          },
          "suffix": {
            "type": "string",
            "description": "The payer's suffix.",
            "readOnly": true
          },
          "payer_id": {
            "type": "string",
            "description": "The PayPal-assigned encrypted payer ID.",
            "readOnly": true
          },
          "birth_date": {
            "type": "string",
            "format": "date-time",
            "description": "The birth date of the payer, in [Internet date format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, `1990-04-12`."
          },
          "tax_id": {
            "type": "string",
            "description": "The payer’s tax ID. Supported for the PayPal payment method only.",
            "maxLength": 14
          },
          "tax_id_type": {
            "type": "string",
            "description": "The payer’s tax ID type. Supported for the PayPal payment method only.",
            "enum": [
              "BR_CPF",
              "BR_CNPJ"
            ]
          },
          "country_code": {
            "type": "string",
            "description": "The payer's [two-character IS0-3166-1 country code](/docs/integration/direct/rest/country-codes/)."
          },
          "billing_address": {
            "$ref": "#/components/schemas/address",
            "description": "The payer's billing address."
          },
          "shipping_address": {
            "$ref": "#/components/schemas/shipping_address",
            "description": "Deprecated. The shipping address. Use the shipping address for the purchase unit or at the root level of the checkout session.",
            "readOnly": true
          }
        }
      },
      "payer": {
        "type": "object",
        "title": "Payer",
        "description": "The payer. The payer funds the payment.",
        "properties": {
          "payment_method": {
            "type": "string",
            "enum": [
              "credit_card",
              "bank",
              "paypal",
              "pay_upon_invoice",
              "carrier",
              "alternate_payment"
            ],
            "description": "The payment method. Value is PayPal Wallet payment, bank direct debit, or direct credit card."
          },
          "status": {
            "type": "string",
            "enum": [
              "VERIFIED",
              "UNVERIFIED"
            ],
            "description": "The status of payer's PayPal account.",
            "readOnly": true
          },
          "funding_instruments": {
            "type": "array",
            "description": "An array of a single funding instrument for the current payment. Valid only and required for the credit card payment method. The array must include either a `credit_card` or `credit_card_token` object. If the array contains more than one instrument, the payment is declined.",
            "items": {
              "$ref": "#/components/schemas/funding_instrument"
            }
          },
          "payer_info": {
            "$ref": "#/components/schemas/payer_info"
          }
        }
      },
      "pay_order_request": {
        "type": "object",
        "title": "Execute Order",
        "description": "An execute order request.",
        "required": [
          "disbursement_mode"
        ],
        "properties": {
          "disbursement_mode": {
            "type": "string",
            "description": "Indicates whether to disburse money instantly or later.",
            "enum": [
              "INSTANT",
              "DELAYED"
            ]
          },
          "payer": {
            "description": "The source of the funds for this payment. Either a PayPal account or a credit card.",
            "$ref": "#/components/schemas/payer"
          }
        }
      },
      "pay_order_response": {
        "type": "object",
        "title": "Pay Order Response",
        "description": "A pay order response.",
        "properties": {
          "order_id": {
            "type": "string",
            "description": "The ID of the order.",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "description": "The status of the order.",
            "readOnly": true,
            "enum": [
              "APPROVED",
              "CANCELED",
              "COMPLETED",
              "CREATED",
              "EXPIRED",
              "FAILED",
              "IN_PROGRESS",
              "PARTIALLY_COMPLETED",
              "SUBMITTED"
            ]
          },
          "intent": {
            "type": "string",
            "description": "The intent.",
            "enum": [
              "SALE",
              "AUTHORIZE"
            ]
          },
          "payer_info": {
            "description": "The payer information.",
            "$ref": "#/components/schemas/payer_info"
          },
          "purchase_units": {
            "type": "array",
            "description": "An array of purchase units. Each purchase unit establishes a contract between a customer and merchant.",
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/purchase_unit"
            }
          },
          "create_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the resource was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "readOnly": true
          },
          "update_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the resource was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "readOnly": true
          },
          "links": {
            "type": "array",
            "description": "An array of request-related [HATEOAS links](/api/rest/responses/#hateoas-links).",
            "readOnly": true,
            "items": {
              "readOnly": true,
              "$ref": "#/components/schemas/link_description"
            }
          }
        }
      }
    },
    "examples": {
      "order": {
        "value": {
          "purchase_units": [
            {
              "reference_id": "store_mobile_world_order_1234",
              "description": "Mobile World Store order-1234",
              "amount": {
                "currency": "USD",
                "details": {
                  "subtotal": "1.09",
                  "shipping": "0.02",
                  "tax": "0.33"
                },
                "total": "1.44"
              },
              "payee": {
                "email": "seller@example.com"
              },
              "items": [
                {
                  "name": "NeoPhone",
                  "sku": "sku03",
                  "price": "0.54",
                  "currency": "USD",
                  "quantity": "1"
                },
                {
                  "name": "Fitness Watch",
                  "sku": "sku04",
                  "price": "0.55",
                  "currency": "USD",
                  "quantity": "1"
                }
              ],
              "shipping_address": {
                "line1": "2211 N First Street",
                "line2": "Building 17",
                "city": "San Jose",
                "country_code": "US",
                "postal_code": "95131",
                "state": "CA",
                "phone": "(123) 456-7890"
              },
              "shipping_method": "United Postal Service",
              "partner_fee_details": {
                "receiver": {
                  "email": "partner@example.com"
                },
                "amount": {
                  "value": "0.01",
                  "currency": "USD"
                }
              },
              "payment_linked_group": 1,
              "custom": "custom_value_2388",
              "invoice_number": "invoice_number_2388",
              "payment_descriptor": "Payment Mobile World"
            }
          ],
          "redirect_urls": {
            "return_url": "https://example.com/return",
            "cancel_url": "https://example.com/cancel"
          }
        }
      }
    }
  }
}
